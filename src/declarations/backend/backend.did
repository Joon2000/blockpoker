type PlayingStatus = 
 variant {
   ALL_READY;
   GAME_END;
   NOT_ALL_READY;
   PLAYING;
 };
type Player = 
 record {
   address: principal;
   bettingAction: BettingAction;
   cards: List_3;
   currentBettingChips: nat;
   currentChips: nat;
   isReady: bool;
   totalBettingChips: nat;
   totalCardNumber: nat;
 };
type MoneyBox = nat;
type List_3 = 
 opt record {
       Card__1;
       List_3;
     };
type List_2 = 
 opt record {
       Player;
       List_2;
     };
type List_1 = 
 opt record {
       principal;
       List_1;
     };
type List = 
 opt record {
       Card;
       List;
     };
type GameStatus = 
 record {
   cardDeck: CardDeck;
   isAllCall: bool;
   masterPlayer: opt principal;
   moneyBox: MoneyBox;
   playingStatus: PlayingStatus;
   whoseTurn: opt principal;
 };
type Card__1 = 
 record {
   cardNumber: nat;
   order: nat;
 };
type CardDeck = 
 opt record {
       Card__1;
       List_3;
     };
type Card = 
 record {
   cardNumber: nat;
   order: nat;
 };
type BettingAction = 
 variant {
   CALL;
   CHECK;
   FOLD;
   NONE;
   RAISE;
 };
service : {
  endGame: () -> () oneway;
  exchangePokerChips: (principal, nat) -> () oneway;
  exitGame: (principal) -> () oneway;
  getGameStatus: () -> (GameStatus) query;
  getPlayerInfoList: () -> (List_2) query;
  getPlayerList: () -> (List_1) query;
  readyGame: (principal) -> () oneway;
  startGame: (principal) -> () oneway;
  test_drawCard: () -> (opt Card);
  test_getEncryptedCard: (nat, nat) -> (List);
}
